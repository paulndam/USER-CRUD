{"version":3,"sources":["components/UserForm.js","components/UserList.js","views/SpecificUser.js","components/EditUserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","props","useState","firstname","setfirstname","lastname","setlastname","seterrors","className","class","onSubmit","e","preventDefault","newUser","console","log","axios","post","then","res","data","errors","navigate","catch","error","for","type","id","aria-describedby","onChange","target","value","onClick","allofusers","setallofusers","getalluser","get","user","err","useEffect","map","x","i","key","_id","to","delete","setuser","_d","EditUserForm","message","userx","put","App","path","UserList","SpecificUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb7be4e5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { navigate } from \"@reach/router\";\n\nconst UserForm = (props) => {\n  // keeping track of what is being typed\n  const [firstname, setfirstname] = useState(\"\");\n  const [lastname, setlastname] = useState(\"\");\n  const [errors, seterrors] = useState({});\n\n  // handle upon form submition\n  const create = (e) => {\n    e.preventDefault();\n    // props.addUser({ firstname, lastname });\n\n    const newUser = { firstname, lastname };\n    console.log(1, newUser);\n\n    setfirstname(\"\");\n    setlastname(\"\");\n\n    //making post request to create a new person\n    axios\n      .post(\"http://localhost:8000/api/createuser\", newUser)\n      .then((res) => {\n        console.log(5, res);\n        if (res.data.errors) {\n          seterrors(res.data.errors);\n        } else {\n          navigate(\"/allusers\");\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-4\">\n          <div className=\"card bg-light mb-3\">\n            <div className=\"card-header\">Register</div>\n            <div class=\"card-body\">\n              <form onSubmit={create}>\n                <div className=\"form-group\">\n                  <label for=\"firstname\">First name</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"firstname\"\n                    aria-describedby=\"firstname\"\n                    onChange={(e) => setfirstname(e.target.value)}\n                    // value={firstname}\n                  />\n                  {/* {firstnameError ? (\n                    <p style={{ color: \"red\" }}>{firstnameError}</p>\n                  ) : (\n                    \"\"\n                  )} */}\n                  <small\n                    id=\"firstname\"\n                    className=\"form-text text-muted\"\n                  ></small>\n                </div>\n\n                <div className=\"form-group\">\n                  <label for=\"lastname\">Last name</label>\n                  <input\n                    type=\"lastname\"\n                    className=\"form-control\"\n                    id=\"lastname\"\n                    aria-describedby=\"lastname\"\n                    onChange={(e) => setlastname(e.target.value)}\n                    // value=\"lastname\"\n                  />\n                  {/* {lastnameError ? (\n                    <p style={{ color: \"red\" }}>{lastnameError}</p>\n                  ) : (\n                    \"\"\n                  )} */}\n                  <small id=\"lastname\" className=\"form-text text-muted\"></small>\n                </div>\n\n                {/* <div className=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"email\"\n                    aria-describedby=\"email\"\n                    onChange={validationsthree}\n                    // value=\"email\"\n                  />\n                  {emailError ? (\n                    <p style={{ color: \"red\" }}>{emailError}</p>\n                  ) : (\n                    \"\"\n                  )}\n                  <small id=\"email\" className=\"form-text text-muted\"></small>\n                </div>\n\n                <div className=\"form-group\">\n                  <label for=\"password\">Password</label>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    id=\"password\"\n                    aria-describedby=\"password\"\n                    onChange={validationsfour}\n                    // value=\"password\"\n                  />\n                  {passwordError ? (\n                    <p style={{ color: \"red\" }}>{passwordError}</p>\n                  ) : (\n                    \"\"\n                  )}\n                  <small id=\"password\" className=\"form-text text-muted\"></small>\n                </div> */}\n\n                <button type=\"submit\" className=\"btn btn-primary\" onClick=\"\">\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserForm;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"@reach/router\";\n\n//making a list to display all the users\nexport default (props) => {\n  const [allofusers, setallofusers] = useState([]);\n  //   const [firstname, setfirstname] = useState([]);\n  //   const [lastname, setlastname] = useState([]);\n\n  const getalluser = () => {\n    axios\n      .get(\"http://localhost:8000/api/allusers\")\n      .then((res) => {\n        console.log(res);\n        setallofusers(res.data.user);\n        // setfirstname(res.data);\n        // setlastname(res.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    getalluser();\n  }, []);\n\n  // to delete user\n  const removeUser = (_id) => {\n    console.log(_id);\n    axios\n      .delete(`http://localhost:8000/api/allusers/delete/${_id}`)\n      .then((res) => {\n        console.log(res);\n        getalluser();\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"conatiner-fluid\">\n      {allofusers.map((x, i) => (\n        <div className=\"card my-3\" key={x._id}>\n          <div className=\"card-body\">\n            <p>first name: {x.firstname}</p>\n            <p>last name: {x.lastname}</p>\n            <Link className=\"btn btn-outline-warning\" to={`/edit/${x._id}`}>\n              Edit\n            </Link>\n            <button\n              className=\"btn btn-outline-danger float-right\"\n              onClick={(e) => removeUser(x._id)}\n            >\n              Remove\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Link } from \"@reach/router\";\n\nexport default (props) => {\n  const [user, setuser] = useState({});\n  useEffect(() => {\n    console.log(\"waazzaaaa\");\n    console.log(props._id);\n    axios\n      .get(\"http://localhost:8000/api/singleuser/\" + props._id)\n      .then((res) => {\n        console.log(res);\n        setuser(res.data);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const removeUser = (_id) => {\n    console.log(_id);\n    axios\n      .delete(`http://localhost:/8000/api/singleuser/${props._id}`)\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"card\">\n        <div className=\"card-header\">{user.firstname}</div>\n        <div className=\"card-body\">\n          <p>first name: {user.firstname} </p>\n          <p>last name: {user.lastname}</p>\n          <Link className=\"btn btn-outline-warning\" to={`/edit/${user._d}`}>\n            Edit\n          </Link>\n          <button\n            className=\"btn btn-outline-danger float-right\"\n            onClick={(e) => removeUser(user._id)}\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { navigate } from \"@reach/router\";\nimport moment from \"moment\";\n\n//editing header\n\nconst EditUserForm = (props) => {\n  const [firstname, setfirstname] = useState(\"\");\n  const [lastname, setlastname] = useState(\"\");\n  const [errors, seterrors] = useState({});\n\n  useEffect(() => {\n    axios\n      .get(`http://localhost:8000/api/allusers/${props._id}`)\n      .then((res) => {\n        console.log(res);\n        setfirstname(res.data.firstname);\n        setlastname(res.data.lastname);\n      })\n      .catch((errors) => console.log(errors.message));\n  }, [props._id]);\n\n  //method to update\n\n  const UpdateUser = (e) => {\n    e.preventDefault();\n    const userx = { firstname, lastname };\n    axios\n      .put(`http://localhost:8000/api/allusers/update/${props._id}`, userx)\n      .then((res) => {\n        console.log(res);\n        if (res.data.errors) {\n          seterrors(res.data.errors);\n        } else {\n          navigate(\"/allusers\");\n        }\n      })\n      .catch((error) => console.log(errors.message));\n  };\n\n  const removeUser = () => {\n    axios\n      .delete(`http://localhost:8000/api/allusers/delete/${props._id}`)\n      .then((res) => {\n        console.log(res);\n        navigate(\"/allusers\");\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <form onSubmit={UpdateUser}>\n          <div className=\"form-group\">\n            <label for=\"firstname\">First name</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"firstname\"\n              aria-describedby=\"firstname\"\n              onChange={(e) => setfirstname(e.target.value)}\n              value={firstname}\n            />\n            {/* {firstnameError ? (\n                    <p style={{ color: \"red\" }}>{firstnameError}</p>\n                  ) : (\n                    \"\"\n                  )} */}\n            <small id=\"firstname\" className=\"form-text text-muted\"></small>\n          </div>\n\n          <div className=\"form-group\">\n            <label for=\"lastname\">Last name</label>\n            <input\n              type=\"lastname\"\n              className=\"form-control\"\n              id=\"lastname\"\n              aria-describedby=\"lastname\"\n              onChange={(e) => setlastname(e.target.value)}\n              value={lastname}\n            />\n            {/* {lastnameError ? (\n                    <p style={{ color: \"red\" }}>{lastnameError}</p>\n                  ) : (\n                    \"\"\n                  )} */}\n            <small id=\"lastname\" className=\"form-text text-muted\"></small>\n          </div>\n\n          {/* <div className=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"email\"\n                    aria-describedby=\"email\"\n                    onChange={validationsthree}\n                    // value=\"email\"\n                  />\n                  {emailError ? (\n                    <p style={{ color: \"red\" }}>{emailError}</p>\n                  ) : (\n                    \"\"\n                  )}\n                  <small id=\"email\" className=\"form-text text-muted\"></small>\n                </div>\n\n                <div className=\"form-group\">\n                  <label for=\"password\">Password</label>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    id=\"password\"\n                    aria-describedby=\"password\"\n                    onChange={validationsfour}\n                    // value=\"password\"\n                  />\n                  {passwordError ? (\n                    <p style={{ color: \"red\" }}>{passwordError}</p>\n                  ) : (\n                    \"\"\n                  )}\n                  <small id=\"password\" className=\"form-text text-muted\"></small>\n                </div> */}\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n        <div className=\"col-sm-8 offset-sm-2 mt-5\">\n          <button className=\"btn btn-danger btn-block\" onClick={removeUser}>\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditUserForm;\n","import React from \"react\";\nimport User from \"./views/User.js\";\nimport UserForm from \"./components/UserForm.js\";\nimport UserList from \"./components/UserList.js\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Router, link } from \"@reach/router\";\nimport SpecificUser from \"./views/SpecificUser\";\nimport EditUserForm from \"./components/EditUserForm.js\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Router>\n        {/* <User path=\"/\" /> */}\n        <UserForm path=\"/\" />\n        <UserList path=\"/allusers\" />\n        <SpecificUser path=\"/singleuser/:_id\" />\n        <EditUserForm path=\"/edit/:_id\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}